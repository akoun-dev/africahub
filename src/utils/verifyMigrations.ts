/**
 * Script de v√©rification des migrations pour le syst√®me utilisateur AfricaHub
 * √Ä ex√©cuter apr√®s l'application des migrations pour s'assurer que tout fonctionne
 */

import { supabase } from '@/integrations/supabase/client';

interface MigrationCheck {
  name: string;
  check: () => Promise<boolean>;
  description: string;
}

/**
 * V√©rifications des migrations
 */
export class MigrationVerifier {
  
  private checks: MigrationCheck[] = [
    {
      name: 'Tables de base',
      description: 'V√©rifier que toutes les tables principales existent',
      check: async () => {
        const tables = [
          'user_profiles',
          'merchant_profiles', 
          'user_permissions',
          'user_activity_logs',
          'user_sessions'
        ];
        
        for (const table of tables) {
          const { error } = await supabase.from(table).select('*').limit(1);
          if (error) {
            console.error(`‚ùå Table ${table} manquante:`, error);
            return false;
          }
        }
        return true;
      }
    },
    
    {
      name: 'Tables de configuration',
      description: 'V√©rifier les tables de configuration et donn√©es',
      check: async () => {
        const tables = [
          'permission_definitions',
          'system_settings',
          'business_types'
        ];
        
        for (const table of tables) {
          const { error } = await supabase.from(table).select('*').limit(1);
          if (error) {
            console.error(`‚ùå Table ${table} manquante:`, error);
            return false;
          }
        }
        return true;
      }
    },
    
    {
      name: 'Vues syst√®me',
      description: 'V√©rifier que les vues sont cr√©√©es',
      check: async () => {
        const views = [
          'user_stats',
          'complete_user_profiles',
          'recent_user_activity'
        ];
        
        for (const view of views) {
          const { error } = await supabase.from(view).select('*').limit(1);
          if (error) {
            console.error(`‚ùå Vue ${view} manquante:`, error);
            return false;
          }
        }
        return true;
      }
    },
    
    {
      name: 'Fonctions RPC',
      description: 'V√©rifier que les fonctions RPC fonctionnent',
      check: async () => {
        try {
          // Test de la fonction get_user_roles
          const { error: rolesError } = await supabase.rpc('get_user_roles', {
            p_user_id: '00000000-0000-0000-0000-000000000000'
          });
          
          if (rolesError && !rolesError.message.includes('null')) {
            console.error('‚ùå Fonction get_user_roles:', rolesError);
            return false;
          }
          
          // Test de la fonction check_user_permission
          const { error: permError } = await supabase.rpc('check_user_permission', {
            p_user_id: '00000000-0000-0000-0000-000000000000',
            p_permission: 'view_products'
          });
          
          if (permError && !permError.message.includes('null')) {
            console.error('‚ùå Fonction check_user_permission:', permError);
            return false;
          }
          
          return true;
        } catch (error) {
          console.error('‚ùå Erreur lors du test des fonctions RPC:', error);
          return false;
        }
      }
    },
    
    {
      name: 'Donn√©es initiales',
      description: 'V√©rifier que les donn√©es de base sont ins√©r√©es',
      check: async () => {
        // V√©rifier les permissions de base
        const { data: permissions, error: permError } = await supabase
          .from('permission_definitions')
          .select('*')
          .limit(5);
          
        if (permError || !permissions || permissions.length === 0) {
          console.error('‚ùå Permissions de base manquantes:', permError);
          return false;
        }
        
        // V√©rifier les param√®tres syst√®me
        const { data: settings, error: settingsError } = await supabase
          .from('system_settings')
          .select('*')
          .limit(5);
          
        if (settingsError || !settings || settings.length === 0) {
          console.error('‚ùå Param√®tres syst√®me manquants:', settingsError);
          return false;
        }
        
        // V√©rifier les types de business
        const { data: businessTypes, error: businessError } = await supabase
          .from('business_types')
          .select('*')
          .limit(5);
          
        if (businessError || !businessTypes || businessTypes.length === 0) {
          console.error('‚ùå Types de business manquants:', businessError);
          return false;
        }
        
        return true;
      }
    },
    
    {
      name: 'Authentification Supabase',
      description: 'V√©rifier la connexion √† Supabase Auth',
      check: async () => {
        try {
          const { data, error } = await supabase.auth.getSession();
          if (error) {
            console.error('‚ùå Erreur auth session:', error);
            return false;
          }
          return true;
        } catch (error) {
          console.error('‚ùå Erreur connexion Supabase Auth:', error);
          return false;
        }
      }
    }
  ];

  /**
   * Ex√©cuter toutes les v√©rifications
   */
  async runAllChecks(): Promise<{ success: boolean; results: Array<{ name: string; success: boolean; description: string }> }> {
    console.log('üîç D√©but de la v√©rification des migrations...\n');
    
    const results = [];
    let allSuccess = true;
    
    for (const check of this.checks) {
      console.log(`‚è≥ V√©rification: ${check.name}...`);
      
      try {
        const success = await check.check();
        results.push({
          name: check.name,
          success,
          description: check.description
        });
        
        if (success) {
          console.log(`‚úÖ ${check.name}: OK`);
        } else {
          console.log(`‚ùå ${check.name}: √âCHEC`);
          allSuccess = false;
        }
      } catch (error) {
        console.error(`üí• ${check.name}: ERREUR -`, error);
        results.push({
          name: check.name,
          success: false,
          description: check.description
        });
        allSuccess = false;
      }
      
      console.log(''); // Ligne vide pour la lisibilit√©
    }
    
    return { success: allSuccess, results };
  }

  /**
   * Afficher un rapport d√©taill√©
   */
  displayReport(results: Array<{ name: string; success: boolean; description: string }>): void {
    console.log('\nüìä RAPPORT DE V√âRIFICATION DES MIGRATIONS\n');
    console.log('='.repeat(50));
    
    const successful = results.filter(r => r.success);
    const failed = results.filter(r => !r.success);
    
    console.log(`‚úÖ R√©ussies: ${successful.length}/${results.length}`);
    console.log(`‚ùå √âchou√©es: ${failed.length}/${results.length}`);
    
    if (failed.length > 0) {
      console.log('\n‚ùå V√âRIFICATIONS √âCHOU√âES:');
      failed.forEach(result => {
        console.log(`  ‚Ä¢ ${result.name}: ${result.description}`);
      });
    }
    
    if (successful.length === results.length) {
      console.log('\nüéâ TOUTES LES MIGRATIONS SONT APPLIQU√âES AVEC SUCC√àS !');
      console.log('\n‚úÖ Votre syst√®me de gestion des utilisateurs AfricaHub est op√©rationnel.');
      console.log('\nüöÄ Vous pouvez maintenant:');
      console.log('  ‚Ä¢ Tester l\'authentification sur /auth');
      console.log('  ‚Ä¢ Cr√©er des comptes utilisateur et marchand');
      console.log('  ‚Ä¢ Acc√©der aux dashboards sp√©cialis√©s');
      console.log('  ‚Ä¢ G√©rer les permissions et r√¥les');
    } else {
      console.log('\n‚ö†Ô∏è  CERTAINES MIGRATIONS ONT √âCHOU√â');
      console.log('\nüîß Actions recommand√©es:');
      console.log('  ‚Ä¢ V√©rifier les logs Supabase');
      console.log('  ‚Ä¢ R√©appliquer les migrations manuellement');
      console.log('  ‚Ä¢ Consulter la documentation APPLY_MIGRATIONS_MANUAL.md');
    }
    
    console.log('\n' + '='.repeat(50));
  }

  /**
   * Cr√©er un utilisateur de test
   */
  async createTestUser(): Promise<boolean> {
    try {
      console.log('üë§ Cr√©ation d\'un utilisateur de test...');
      
      const { data, error } = await supabase.auth.signUp({
        email: 'test@africahub.com',
        password: 'test123456',
        options: {
          data: {
            first_name: 'Test',
            last_name: 'AfricaHub',
            role: 'user'
          }
        }
      });
      
      if (error) {
        console.error('‚ùå Erreur cr√©ation utilisateur test:', error);
        return false;
      }
      
      console.log('‚úÖ Utilisateur de test cr√©√© avec succ√®s');
      return true;
    } catch (error) {
      console.error('üí• Erreur inattendue lors de la cr√©ation de l\'utilisateur test:', error);
      return false;
    }
  }
}

/**
 * Fonction utilitaire pour ex√©cuter la v√©rification
 */
export async function verifyMigrations(): Promise<boolean> {
  const verifier = new MigrationVerifier();
  const { success, results } = await verifier.runAllChecks();
  verifier.displayReport(results);
  return success;
}

/**
 * Fonction pour ex√©cuter la v√©rification avec cr√©ation d'utilisateur test
 */
export async function verifyMigrationsWithTestUser(): Promise<boolean> {
  const verifier = new MigrationVerifier();
  
  // V√©rifications principales
  const { success, results } = await verifier.runAllChecks();
  
  // Cr√©ation d'utilisateur test si les migrations sont OK
  if (success) {
    await verifier.createTestUser();
  }
  
  verifier.displayReport(results);
  return success;
}

export default MigrationVerifier;
