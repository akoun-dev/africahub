
version: '3.8'

services:
  # API Gateway
  kong:
    image: kong:3.4-alpine
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/kong/declarative/kong.yml
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
    ports:
      - "8000:8000"
      - "8001:8001"
    volumes:
      - ./kong/kong.yml:/kong/declarative/kong.yml
    depends_on:
      - product-catalog-service
      - comparison-engine-service
      - user-management-service
      - ai-recommendations-service
      - notifications-service
      - analytics-service
      - cms-service

  # Core Business Services
  product-catalog-service:
    build: ../microservices/product-catalog
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      - postgres
      - redis
      - rabbitmq

  comparison-engine-service:
    build: ../microservices/comparison-engine
    ports:
      - "3007:3007"
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - REDIS_URL=redis://redis:6379
      - PRODUCT_CATALOG_URL=http://product-catalog-service:3006
    depends_on:
      - postgres
      - redis
      - product-catalog-service

  user-management-service:
    build: ../microservices/user-management
    ports:
      - "3008:3008"
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - postgres
      - redis

  # Existing Services (Enhanced)
  ai-recommendations-service:
    build: ../microservices/ai-recommendations
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - PRODUCT_CATALOG_URL=http://product-catalog-service:3006
      - USER_MANAGEMENT_URL=http://user-management-service:3008
    depends_on:
      - postgres
      - redis
      - rabbitmq
      - product-catalog-service
      - user-management-service

  notifications-service:
    build: ../microservices/notifications
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - USER_MANAGEMENT_URL=http://user-management-service:3008
    depends_on:
      - postgres
      - redis
      - rabbitmq
      - user-management-service

  analytics-service:
    build: ../microservices/analytics
    ports:
      - "3003:3003"
      - "3004:3004"  # WebSocket port
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - INFLUXDB_HOST=influxdb
    depends_on:
      - postgres
      - redis
      - rabbitmq
      - influxdb

  cms-service:
    build: ../microservices/cms
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      - postgres
      - redis
      - rabbitmq

  # Infrastructure Services
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=microservices_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init-microservices.sql:/docker-entrypoint-initdb.d/init.sql

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  influxdb:
    image: influxdb:1.8-alpine
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_DB=analytics
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=password
    volumes:
      - influxdb_data:/var/lib/influxdb

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus-microservices.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/microservices-dashboards:/etc/grafana/provisioning/dashboards

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  influxdb_data:
  prometheus_data:
  grafana_data:
